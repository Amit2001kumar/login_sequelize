const express = require('express');
const app = express();
const bcrypt = require('bcrypt');
const User = require('./models/User');
const jwt = require('jsonwebtoken');
const csrf = require('csurf');
const cookieParser = require('cookie-parser');


app.use(express.json());

const PORT = process.env.PORT || 3000;

// After setting up your Express app instance
app.use(cookieParser());
// Add the CSRF middleware after cookie parsing
app.use(csrf({ cookie: true }));
app.use((req, res, next) => {
  res.locals.csrfToken = req.csrfToken();
  next();
});

app.post('/your-action-route', (req, res) => {
  const submittedCSRFToken = req.body._csrf; // CSRF token from the form
  const csrfToken = req.csrfToken(); // CSRF token generated by csurf middleware
  if (submittedCSRFToken !== csrfToken) {
    // Handle invalid CSRF token (e.g., throw an error, redirect, or show an error page)
  }
  // Continue with your logic for handling the request
});


app.use(function (req, res, next) {
  res.header("Access-Control-Allow-Origin", "*");
  res.header("Access-Control-Allow-Headers", "Origin, X-Requested-with, Content-Type, Accept");
  next();
});


app.post('/register', async (req, res) => {
    try {
        const { username, password } = req.body;
        const hashedPassword = await bcrypt.hash(password, 10);

        const user = await User.create({
            username,
            password: hashedPassword,
        });

        res.json({ message: 'Registration successful', user });
    } catch (error) {
        console.error(error);
        res.status(500).json({ error: 'Registration failed' });
    }
});




app.post('/login', async (req, res) => {
    try {
        const { username, password } = req.body;

        const user = await User.findOne({ where: { username } });
        if (!user) {
            return res.status(404).json({ error: 'User not found' });
        }

        const isPasswordValid = await bcrypt.compare(password, user.password);
        if (!isPasswordValid) {
            return res.status(401).json({ error: 'Invalid password' });
        }

        const token = jwt.sign({ userId: user.id }, 'your_secret_key');
        res.json({ message: 'Login successful', token });
    } catch (error) {
        console.error(error);
        res.status(500).json({ error: 'Login failed' });
    }
});


app.listen(PORT, () => {
    console.log(`Server is running on port ${PORT}`);
});
